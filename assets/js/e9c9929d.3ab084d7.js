"use strict";(self.webpackChunkatp_knowledge=self.webpackChunkatp_knowledge||[]).push([[9227],{8427:(n,e,s)=>{s.r(e),s.d(e,{assets:()=>a,contentTitle:()=>c,default:()=>h,frontMatter:()=>r,metadata:()=>i,toc:()=>o});var d=s(4848),l=s(8453);const r={sidebar_position:3},c="Pandas",i={id:"python/pandas",title:"Pandas",description:"- Read csv: df = pd.read_csv(url)",source:"@site/docs/python/pandas.md",sourceDirName:"python",slug:"/python/pandas",permalink:"/atp-knowledge/docs/python/pandas",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/python/pandas.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Timeseries Dataset Wide",permalink:"/atp-knowledge/docs/python/atp_tools/ts_dataset_wide"},next:{title:"Numpy",permalink:"/atp-knowledge/docs/python/numpy"}},a={},o=[];function t(n){const e={code:"code",h1:"h1",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,l.R)(),...n.components};return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsx)(e.header,{children:(0,d.jsx)(e.h1,{id:"pandas",children:"Pandas"})}),"\n",(0,d.jsxs)(e.ul,{children:["\n",(0,d.jsxs)(e.li,{children:["\n",(0,d.jsxs)(e.p,{children:["Read csv: ",(0,d.jsx)(e.code,{children:"df = pd.read_csv(url)"})]}),"\n"]}),"\n",(0,d.jsxs)(e.li,{children:["\n",(0,d.jsxs)(e.p,{children:["Type of the object: ",(0,d.jsx)(e.code,{children:"type(df)"})]}),"\n"]}),"\n",(0,d.jsxs)(e.li,{children:["\n",(0,d.jsxs)(e.p,{children:["Column names: ",(0,d.jsx)(e.code,{children:"list(df)"})]}),"\n"]}),"\n",(0,d.jsxs)(e.li,{children:["\n",(0,d.jsxs)(e.p,{children:["Head: ",(0,d.jsx)(e.code,{children:"df.head()"})]}),"\n"]}),"\n",(0,d.jsxs)(e.li,{children:["\n",(0,d.jsxs)(e.p,{children:["Tail: ",(0,d.jsx)(e.code,{children:"df.tail()"})]}),"\n"]}),"\n",(0,d.jsxs)(e.li,{children:["\n",(0,d.jsxs)(e.p,{children:["Datatype of each column: ",(0,d.jsx)(e.code,{children:"df.dtypes"})]}),"\n"]}),"\n",(0,d.jsxs)(e.li,{children:["\n",(0,d.jsx)(e.p,{children:"Column exist:"}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-Python",children:"if 'A' in df:\n  pass\n# or\nif 'A' in df.columns:\n  pass\n"})}),"\n"]}),"\n",(0,d.jsxs)(e.li,{children:["\n",(0,d.jsxs)(e.p,{children:["Columns sorted ",(0,d.jsx)(e.code,{children:"df = df.reindex(sorted(df.columns), axis=1)"})]}),"\n"]}),"\n",(0,d.jsxs)(e.li,{children:["\n",(0,d.jsx)(e.p,{children:"Columns order:"}),"\n"]}),"\n"]}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-Python",children:'model_columns = ["Col1","Col2"]\ndf = df.reindex(\ncolumns=model_columns + list([a for a in df.columns if a not in model_columns])\n)\n'})}),"\n",(0,d.jsxs)(e.ul,{children:["\n",(0,d.jsxs)(e.li,{children:["\n",(0,d.jsx)(e.p,{children:"Rename column:"}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-Python",children:"df.rename(\n  columns={'oldName1': 'newName1', 'oldName2': 'newName2'},\n  inplace=True,\n  )\n"})}),"\n"]}),"\n",(0,d.jsxs)(e.li,{children:["\n",(0,d.jsxs)(e.p,{children:["Basic statistic: ",(0,d.jsx)(e.code,{children:"df.describe()"})]}),"\n"]}),"\n",(0,d.jsxs)(e.li,{children:["\n",(0,d.jsx)(e.p,{children:"Extract first x rows:"}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-Python",children:"df[0:x]\n# or\ndf.iloc[:x]\n"})}),"\n"]}),"\n",(0,d.jsxs)(e.li,{children:["\n",(0,d.jsx)(e.p,{children:"Filter:"}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-Python",children:"df[df['Hair']==\"Black\"]\ndf.query(\"Hair =='Black'\")\n\ndf[(df['Hair']==\"Black\")  & (df[\"Sex\"]==\"Male\")]\ndf.query(\"Hair == 'Black' & Sex =='Male'\")\n\ndf[(df['Hair']==\"Black\") | (df[\"Eye\"]==\"Brown\")]\ndf.query(\"Hair == 'Black' | Eye =='Brown'\")\n\ndf[df.Eye.isin(['Blue','Hazel','Green'])]\n"})}),"\n"]}),"\n",(0,d.jsxs)(e.li,{children:["\n",(0,d.jsx)(e.p,{children:"Select columns:"}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-Python",children:'df[["Eye"]]\ndf.Eye\ndf[["Eye","Sex"]]\n'})}),"\n"]}),"\n",(0,d.jsxs)(e.li,{children:["\n",(0,d.jsxs)(e.p,{children:["Unique column elements: ",(0,d.jsx)(e.code,{children:'df["Eye"].unique()'})]}),"\n"]}),"\n",(0,d.jsxs)(e.li,{children:["\n",(0,d.jsxs)(e.p,{children:["Max of column: ",(0,d.jsx)(e.code,{children:'df["Freq"].max()'})]}),"\n"]}),"\n",(0,d.jsxs)(e.li,{children:["\n",(0,d.jsx)(e.p,{children:"Call function on multiple columns:"}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-Python",children:"pd.DataFrame({'Max_freq': [df.Freq.max()],\n            'Min_freq': [df.Freq.min()],\n            'Std_freq': [np.std(df.Freq)]})\npd.DataFrame({'Max_freq': [df[0:10].Freq.max()],\n            'Min_freq': [df[0:10].Freq.min()],\n            'Std_freq': [np.std(df[0:10].Freq)]})\n"})}),"\n"]}),"\n",(0,d.jsxs)(e.li,{children:["\n",(0,d.jsx)(e.p,{children:"Operation on group:"}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-Python",children:'df.groupby("Sex").agg({"Freq":"max"})\ndf.groupby(["Eye","Sex"]).agg({"Freq":"count"}).rename(columns={"Freq":"Count"})\n'})}),"\n"]}),"\n",(0,d.jsxs)(e.li,{children:["\n",(0,d.jsx)(e.p,{children:"Call functions for goruping"}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-Python",children:'df.assign(Gt50 = (df.Freq > 50)).groupby("Gt50").agg({"Gt50":"count"}).rename(columns ={"Gt50":"Count"})\n'})}),"\n"]}),"\n",(0,d.jsxs)(e.li,{children:["\n",(0,d.jsxs)(e.p,{children:["Remove column: ",(0,d.jsx)(e.code,{children:"df.drop('Unnamed: 0', 1).head()"})]}),"\n"]}),"\n",(0,d.jsxs)(e.li,{children:["\n",(0,d.jsx)(e.p,{children:"Return first or last occurrence:"}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-Python",children:"df.query(\"Eye == 'Blue'\")[:1]\ndf.query(\"Eye == 'Blue'\")[-1:]\n"})}),"\n"]}),"\n",(0,d.jsxs)(e.li,{children:["\n",(0,d.jsx)(e.p,{children:"Return count:"}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-Python",children:'df[df.Eye.isin([\'Blue\',\'Hazel\']) & (df.Sex=="Male")].shape[0]\ndf[df.Eye.isin([\'Blue\',\'Hazel\']) & (df.Sex=="Male")].groupby(["Eye","Sex"]).agg({"Freq":"count"}).rename(columns={"Freq":"Count"})\n'})}),"\n"]}),"\n",(0,d.jsxs)(e.li,{children:["\n",(0,d.jsx)(e.p,{children:"Order:"}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-Python",children:"df.sort_values(by='Freq')\ndf.sort_values(by='Freq', ascending = False)\ndf.sort_values(by=['Freq','Eye'], ascending = [False,True])\n"})}),"\n"]}),"\n",(0,d.jsxs)(e.li,{children:["\n",(0,d.jsxs)(e.p,{children:["Rename columns: ",(0,d.jsx)(e.code,{children:'df.rename(columns = {"Freq":"Frequency","Eye":"Eye_Color"})'})]}),"\n"]}),"\n",(0,d.jsxs)(e.li,{children:["\n",(0,d.jsxs)(e.p,{children:["Unique rows: ",(0,d.jsx)(e.code,{children:'df[["Eye","Sex"]].drop_duplicates()'})]}),"\n"]}),"\n",(0,d.jsxs)(e.li,{children:["\n",(0,d.jsxs)(e.p,{children:["New column ",(0,d.jsx)(e.code,{children:'df.assign(Eye_Hair =df.Eye + df.Hair)[["Eye","Hair","Eye_Hair"]]'})]}),"\n"]}),"\n",(0,d.jsxs)(e.li,{children:["\n",(0,d.jsxs)(e.p,{children:["New column ",(0,d.jsx)(e.code,{children:"df['e'] = e"})]}),"\n"]}),"\n",(0,d.jsxs)(e.li,{children:["\n",(0,d.jsx)(e.p,{children:"set values in dataframe"}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-Python",children:'df.loc[\n    df["dfd"] > 72,\n    "fdf",\n] = np.nan\n'})}),"\n"]}),"\n",(0,d.jsxs)(e.li,{children:["\n",(0,d.jsx)(e.p,{children:"Rolling"}),"\n"]}),"\n"]}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-Python",children:'df["column"].rolling(window="60S",center=True).mean()\ndf["column"].rolling(window="60S",center=True).apply(lambda x: x)\ndef function(x):\n  return x\n\ndf["column"].rolling(window="60S",center=True).apply(function)\n'})}),"\n",(0,d.jsxs)(e.ul,{children:["\n",(0,d.jsxs)(e.li,{children:["Set index: ",(0,d.jsx)(e.code,{children:'df.set_index("column_name", inplace = True)'})]}),"\n",(0,d.jsx)(e.li,{children:"Dropna:"}),"\n"]}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-Python",children:'df.dropna()\ndf.dropna(inplace=True)\ndf.dropna(subset=["col_1","col_2"])\ndf.dropna(thresh=2)\n'})}),"\n",(0,d.jsxs)(e.ul,{children:["\n",(0,d.jsx)(e.li,{children:"Merge"}),"\n"]}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-Python",children:'    # select join\n    df_select_merged = df_select.merge(\n        df,\n        how="left",\n        left_index=True,\n        right_index=True,\n        suffixes=("", "_duplicate"),\n    )\n    # Drop duplicated data\n    for column_name in list(df_select_merged):\n        if column_name.find("_duplicate") >= 0:\n            df_select_merged.drop(column_name, axis="columns", inplace=True)\n'})}),"\n",(0,d.jsxs)(e.ul,{children:["\n",(0,d.jsx)(e.li,{children:"Extract regex from column string"}),"\n"]}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-Python",children:'df[["col_1", "col_1"]] = df["Column"].str.extract(r"^(.*) (\\d{2,3}) bla bla"))\n'})})]})}function h(n={}){const{wrapper:e}={...(0,l.R)(),...n.components};return e?(0,d.jsx)(e,{...n,children:(0,d.jsx)(t,{...n})}):t(n)}},8453:(n,e,s)=>{s.d(e,{R:()=>c,x:()=>i});var d=s(6540);const l={},r=d.createContext(l);function c(n){const e=d.useContext(r);return d.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function i(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(l):n.components||l:c(n.components),d.createElement(r.Provider,{value:e},n.children)}}}]);